From 62c6a3f913d22d1fef525c1a50beac57ae9c95eb Mon Sep 17 00:00:00 2001
From: root <root@spring1944.int>
Date: Mon, 12 Jun 2017 13:22:57 +0200
Subject: [PATCH 1/2] Revert "remove disabled/deprecated unitsync code"

This reverts commit 0806c632fb2268c03d0c4206403469e04e4e6e31.
---
 tools/unitsync/unitsync.cpp   | 395 +++++++++++++++++++++++++++++++++++++++++-
 tools/unitsync/unitsync.h     |  37 ++++
 tools/unitsync/unitsync_api.h |  75 ++++++++
 3 files changed, 503 insertions(+), 4 deletions(-)

diff --git a/tools/unitsync/unitsync.cpp b/tools/unitsync/unitsync.cpp
index 2f602e5..0736ea4 100644
--- a/tools/unitsync/unitsync.cpp
+++ b/tools/unitsync/unitsync.cpp
@@ -2419,13 +2419,11 @@ EXPORT(void) DeleteSpringConfigKey(const char* name)
 	UNITSYNC_CATCH_BLOCKS;
 }
 
+#ifdef ENABLE_DEPRECATED_FUNCTIONS
 /*
 **********************DEPRECATED SECTION
 */
 
-#ifdef ENABLE_DEPRECATED_FUNCTIONS
-
-/*
 #define DEPRECATED \
 	static CMessageOnce msg( \
 			"The deprecated unitsync function " \
@@ -2434,7 +2432,396 @@ EXPORT(void) DeleteSpringConfigKey(const char* name)
 	msg.print(); \
 	SetLastError("deprecated unitsync function called: " \
 			+ std::string(__FUNCTION__))
-*/
+
+
+
+static bool _GetMapInfoEx(const char* mapName, MapInfo* outInfo, int version)
+{
+	CheckInit();
+	CheckNullOrEmpty(mapName);
+	CheckNull(outInfo);
+
+	bool fetchOk;
+
+	InternalMapInfo internalMapInfo;
+	fetchOk = internal_GetMapInfo(mapName, &internalMapInfo);
+
+	if (fetchOk) {
+		safe_strzcpy(outInfo->description, internalMapInfo.description, 255);
+		outInfo->tidalStrength   = internalMapInfo.tidalStrength;
+		outInfo->gravity         = internalMapInfo.gravity;
+		outInfo->maxMetal        = internalMapInfo.maxMetal;
+		outInfo->extractorRadius = internalMapInfo.extractorRadius;
+		outInfo->minWind         = internalMapInfo.minWind;
+		outInfo->maxWind         = internalMapInfo.maxWind;
+
+		outInfo->width           = internalMapInfo.width;
+		outInfo->height          = internalMapInfo.height;
+		outInfo->posCount        = internalMapInfo.xPos.size();
+		if (outInfo->posCount > 16) {
+			// legacy interface does not support more then 16
+			outInfo->posCount = 16;
+		}
+		for (size_t curTeam = 0; curTeam < outInfo->posCount; ++curTeam) {
+			outInfo->positions[curTeam].x = internalMapInfo.xPos[curTeam];
+			outInfo->positions[curTeam].z = internalMapInfo.zPos[curTeam];
+		}
+
+		if (version >= 1) {
+			safe_strzcpy(outInfo->author, internalMapInfo.author, 200);
+		}
+	} else {
+		// contains the error message
+		safe_strzcpy(outInfo->description, internalMapInfo.description, 255);
+
+		// Fill in stuff so TASClient does not crash
+		outInfo->posCount = 0;
+		if (version >= 1) {
+			outInfo->author[0] = '\0';
+		}
+		return false;
+	}
+
+	return fetchOk;
+}
+
+EXPORT(int) ProcessUnitsNoChecksum()
+{
+	DEPRECATED;
+	return ProcessUnits();
+}
+
+EXPORT(int) GetMapInfoEx(const char* mapName, MapInfo* outInfo, int version)
+{
+	DEPRECATED;
+	int ret = 0;
+
+	try {
+		const bool fetchOk = _GetMapInfoEx(mapName, outInfo, version);
+		ret = fetchOk ? 1 : 0;
+	}
+	UNITSYNC_CATCH_BLOCKS;
+
+	return ret;
+}
+
+EXPORT(int) GetMapInfo(const char* mapName, MapInfo* outInfo)
+{
+	DEPRECATED;
+	int ret = 0;
+
+	try {
+		const bool fetchOk = _GetMapInfoEx(mapName, outInfo, 0);
+		ret = fetchOk ? 1 : 0;
+	}
+	UNITSYNC_CATCH_BLOCKS;
+
+	return ret;
+}
+
+EXPORT(const char*) GetMapDescription(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->description.c_str();
+	}
+
+	return NULL;
+}
+
+EXPORT(const char*) GetMapAuthor(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->author.c_str();
+	}
+
+	return NULL;
+}
+
+EXPORT(int) GetMapWidth(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->width;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapHeight(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->height;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapTidalStrength(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->tidalStrength;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapWindMin(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->minWind;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapWindMax(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->maxWind;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapGravity(int index) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->gravity;
+	}
+
+	return -1;
+}
+
+EXPORT(int) GetMapResourceCount(int index) {
+	DEPRECATED;
+	return 1;
+}
+
+EXPORT(const char*) GetMapResourceName(int index, int resourceIndex) {
+	DEPRECATED;
+	if (resourceIndex == 0) {
+		return "Metal";
+	} else {
+		SetLastError("No valid map resource index");
+	}
+
+	return NULL;
+}
+
+EXPORT(float) GetMapResourceMax(int index, int resourceIndex) {
+	DEPRECATED;
+	if (resourceIndex == 0) {
+		const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+		if (mapInfo) {
+			return mapInfo->maxMetal;
+		}
+	} else {
+		SetLastError("No valid map resource index");
+	}
+
+	return 0.0f;
+}
+
+EXPORT(int) GetMapResourceExtractorRadius(int index, int resourceIndex) {
+	DEPRECATED;
+	if (resourceIndex == 0) {
+		const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+		if (mapInfo) {
+			return mapInfo->extractorRadius;
+		}
+	} else {
+		SetLastError("No valid map resource index");
+	}
+
+	return -1;
+}
+
+
+EXPORT(int) GetMapPosCount(int index) {
+	DEPRECATED;
+	int count = -1;
+
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		count = mapInfo->xPos.size();
+	}
+
+	return count;
+}
+
+EXPORT(float) GetMapPosX(int index, int posIndex) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->xPos[posIndex];
+	}
+
+	return -1.0f;
+}
+
+EXPORT(float) GetMapPosZ(int index, int posIndex) {
+	DEPRECATED;
+	const InternalMapInfo* mapInfo = internal_getMapInfo(index);
+	if (mapInfo) {
+		return mapInfo->zPos[posIndex];
+	}
+
+	return -1.0f;
+}
+
+EXPORT(const char*) GetInfoValue(int infoIndex) {
+	DEPRECATED;
+
+	const char* value = NULL;
+
+	try {
+		const InfoItem* infoItem = GetInfoItem(infoIndex);
+		value = GetStr(infoItem->GetValueAsString());
+	}
+	UNITSYNC_CATCH_BLOCKS;
+
+	return value;
+}
+
+EXPORT(const char*) GetPrimaryModName(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetNameVersioned();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModShortName(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetShortName();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModVersion(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetVersion();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModMutator(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetMutator();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModGame(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetGame();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModShortGame(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetShortGame();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(const char*) GetPrimaryModDescription(int index)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckBounds(index, modData.size());
+
+		const std::string& x = modData[index].GetDescription();
+		return GetStr(x);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
+EXPORT(int) OpenArchiveType(const char* name, const char* type)
+{
+	DEPRECATED;
+	try {
+		CheckInit();
+		CheckNullOrEmpty(name);
+		CheckNullOrEmpty(type);
+
+		IArchive* a = archiveLoader.OpenArchive(name, type);
+
+		if (!a) {
+			throw content_error("Archive '" + std::string(name) + "' could not be opened");
+		}
+
+		nextArchive++;
+		openArchives[nextArchive] = a;
+		return nextArchive;
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return 0;
+}
+
+// when removing this function, remove "std::string style" in Option.h, too
+EXPORT(const char*) GetOptionStyle(int optIndex)
+{
+	DEPRECATED;
+	try {
+		CheckOptionIndex(optIndex);
+		return GetStr(options[optIndex].style);
+	}
+	UNITSYNC_CATCH_BLOCKS;
+	return NULL;
+}
+
 
 #endif //
 /*
diff --git a/tools/unitsync/unitsync.h b/tools/unitsync/unitsync.h
index cf3abf6..9fb0c30 100644
--- a/tools/unitsync/unitsync.h
+++ b/tools/unitsync/unitsync.h
@@ -14,6 +14,43 @@
 */
 
 #ifdef ENABLE_DEPRECATED_FUNCTIONS
+/**
+ * @brief 2d vector storing a map defined starting position
+ * @sa MapInfo
+ * @deprecated
+ */
+struct StartPos
+{
+	int x; ///< X component
+	int z; ///< Z component
+};
+
+
+/**
+ * @brief Metadata of a map
+ * @sa GetMapInfo GetMapInfoEx
+ * @deprecated
+ */
+struct MapInfo
+{
+	char* description;   ///< Description (max 255 chars)
+	int tidalStrength;   ///< Tidal strength
+	int gravity;         ///< Gravity
+	float maxMetal;      ///< Metal scale factor
+	int extractorRadius; ///< Extractor radius (of metal extractors)
+	int minWind;         ///< Minimum wind speed
+	int maxWind;         ///< Maximum wind speed
+
+	// 0.61b1+
+	int width;              ///< Width of the map
+	int height;             ///< Height of the map
+	int posCount;           ///< Number of defined start positions
+	StartPos positions[16]; ///< Start positions defined by the map (max 16)
+
+	// VERSION>=1
+	char* author;   ///< Creator of the map (max 200 chars)
+};
+
 #endif //ENABLE_DEPRECATED_FUNCTIONS
 /**
  * @brief Available bitmap typeHints
diff --git a/tools/unitsync/unitsync_api.h b/tools/unitsync/unitsync_api.h
index cadc15c..c3ba07e 100644
--- a/tools/unitsync/unitsync_api.h
+++ b/tools/unitsync/unitsync_api.h
@@ -1138,6 +1138,81 @@ EXPORT(const char*) lpGetStrKeyStrVal(const char* key, const char* defValue);
 /* deprecated functions */
 
 #ifdef ENABLE_DEPRECATED_FUNCTIONS
+/**
+ * @deprecated in June 2011, use ProcessUnits() instead
+ */
+EXPORT(int         ) ProcessUnitsNoChecksum();
+#if       !defined(PLAIN_API_STRUCTURE)
+/**
+ * @deprecated use GetMapOptionCount instead
+ */
+EXPORT(int         ) GetMapInfoEx(const char* mapName, MapInfo* outInfo, int version);
+/**
+ * @deprecated use GetMapOptionCount instead
+ */
+EXPORT(int         ) GetMapInfo(const char* mapName, MapInfo* outInfo);
+#endif // !defined(PLAIN_API_STRUCTURE)
+
+/**
+ * @deprecated use GetMapInfoCount instead
+ */
+EXPORT(const char* ) GetMapDescription(int index);
+EXPORT(const char* ) GetMapAuthor(int index);
+EXPORT(int         ) GetMapWidth(int index);
+EXPORT(int         ) GetMapHeight(int index);
+EXPORT(int         ) GetMapTidalStrength(int index);
+EXPORT(int         ) GetMapWindMin(int index);
+EXPORT(int         ) GetMapWindMax(int index);
+EXPORT(int         ) GetMapGravity(int index);
+EXPORT(int         ) GetMapResourceCount(int index);
+EXPORT(const char* ) GetMapResourceName(int index, int resourceIndex);
+EXPORT(float       ) GetMapResourceMax(int index, int resourceIndex);
+EXPORT(int         ) GetMapResourceExtractorRadius(int index, int resourceIndex);
+EXPORT(int         ) GetMapPosCount(int index);
+EXPORT(float       ) GetMapPosX(int index, int posIndex);
+EXPORT(float       ) GetMapPosZ(int index, int posIndex);
+
+/**
+ * @deprecated use GetInfoValue* instead
+ */
+EXPORT(const char* ) GetInfoValue(int index);
+/**
+ * @deprecated use the mod info item with key "name" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModName(int index);
+/**
+ * @deprecated use the mod info item with key "shortName" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModShortName(int index);
+/**
+ * @deprecated use the mod info item with key "version" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModVersion(int index);
+/**
+ * @deprecated use the mod info item with key "mutator" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModMutator(int index);
+/**
+ * @deprecated use the mod info item with key "game" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModGame(int index);
+/**
+ * @deprecated use the mod info item with key "shortGame" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModShortGame(int index);
+/**
+ * @deprecated use the mod info item with key "description" instead, see GetPrimaryModInfoCount / GetInfoKey
+ */
+EXPORT(const char* ) GetPrimaryModDescription(int index);
+/**
+ * @deprecated use OpenArchive instead
+ */
+EXPORT(int         ) OpenArchiveType(const char* name, const char* type);
+/**
+ * @deprecated unused
+ */
+EXPORT(const char* ) GetOptionStyle(int optIndex);
+
 #endif // ENABLE_DEPRECATED_FUNCTIONS
 /** @} */
 
-- 
2.10.2

